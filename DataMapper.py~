import yaml
import csv

class HandlerBase(object):  pass

class CsvHandler(HandlerBase):
    def __init__(self):
        pass

    def load(self):
        csv.register_dialect('tabbed',delimiter="\t",quoting=csv.QUOTE_NONE)
        self.data = []
        
        with open(self.src,'r') as f:
            reader = csv.reader(f, 'tabbed')
            for row in reader:
                self.data.append(row)
        
    def get_header(self):
        self.load()
        self.fieldnames = self.data[0]
        print self.fieldnames
        return self.fieldnames

        

class DataMapper(object):


    def __init__(self):
        pass

    def load_config(self):
        cfgcon = file('cfg/main.yml','r').read()
        cfg = yaml.load(cfgcon)
        self.cfg = cfg

        cfgcon = file('cfg/conf.yml','r').read()
        self.cfg_fields = yaml.load(cfgcon)
        #print self.cfg_fields


    def run(self):
        self.load_config()
        
        # for now
        self.do_csv_to_csv_template()
    
    
    def do_csv_to_csv_template(self):
        self.handler1 = CsvHandler()
        self.handler1.src = self.cfg['dst']['file']
        self.handler1.delim = self.cfg['dst']['delim']
        
        fieldnames = self.handler1.get_header()
        print "FN" +str(fieldnames)
        # loop dst 
        for fn in fieldnames:
            print fn
            if fn in self.cfg_fields['
        
        
        
        
        
        